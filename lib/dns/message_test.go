// Copyright 2018, Shulhan <ms@kilabit.info>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package dns

import (
	"testing"

	"github.com/shuLhan/share/lib/test"
)

func TestMessageMarshalBinary(t *testing.T) {
	cases := []struct {
		desc string
		in   *Message
		exp  []byte
	}{{
		desc: "Simple query",
		in: &Message{
			Header: &SectionHeader{
				ID:      1,
				IsQuery: true,
				QDCount: 1,
			},
			Question: &SectionQuestion{
				Name:  []byte("kilabit.info"),
				Type:  QueryTypeA,
				Class: QueryClassIN,
			},
		},
		exp: []byte{
			0, 1,
			0, 0,
			0, 1, // QDCount
			0, 0,
			0, 0,
			0, 0,
			7, 'k', 'i', 'l', 'a', 'b', 'i', 't',
			4, 'i', 'n', 'f', 'o',
			0,
			0, 1,
			0, 1,
		},
	}}

	for _, c := range cases {
		got, _ := c.in.MarshalBinary()

		test.Assert(t, c.desc, c.exp, got, true)
	}
}

func TestMessageUnmarshalBinary(t *testing.T) {
	cases := []struct {
		desc string
		exp  *Message
	}{{
		desc: "RR with SOA RDATA",
		exp: &Message{
			Packet: []byte{
				0x00, 0x02, 0x80, 0x80, 0x00, 0x01, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x07, 0x6b, 0x69, 0x6c,
				0x61, 0x62, 0x69, 0x74, 0x04, 0x69, 0x6e, 0x66,
				0x6f, 0x00, 0x00, 0x06, 0x00, 0x01, 0xc0, 0x0c,
				0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x29, 0x0f,
				0x00, 0x38, 0x03, 0x6e, 0x73, 0x31, 0x07, 0x64,
				0x65, 0x77, 0x61, 0x77, 0x65, 0x62, 0x03, 0x63,
				0x6f, 0x6d, 0x00, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
				0x74, 0x6f, 0x72, 0x08, 0x64, 0x65, 0x77, 0x61,
				0x68, 0x6f, 0x73, 0x74, 0xc0, 0x36, 0x78, 0x3a,
				0x3c, 0x85, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00,
				0x1c, 0x20, 0x00, 0x12, 0x75, 0x00, 0x00, 0x01,
				0x51, 0x80,
			},
			Header: &SectionHeader{
				ID:      2,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
			},
			Question: &SectionQuestion{
				Name:  []byte("kilabit.info"),
				Type:  QueryTypeSOA,
				Class: QueryClassIN,
			},
			Answer: []*ResourceRecord{{
				Name:     []byte("kilabit.info"),
				Type:     QueryTypeSOA,
				Class:    QueryClassIN,
				TTL:      10511,
				RDLength: 56,
				rdata: []byte{
					0x03, 0x6e, 0x73, 0x31, 0x07, 0x64, 0x65, 0x77,
					0x61, 0x77, 0x65, 0x62, 0x03, 0x63, 0x6f, 0x6d,
					0x00, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
					0x72, 0x08, 0x64, 0x65, 0x77, 0x61, 0x68, 0x6f,
					0x73, 0x74, 0xc0, 0x36, 0x78, 0x3a, 0x3c, 0x85,
					0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x1c, 0x20,
					0x00, 0x12, 0x75, 0x00, 0x00, 0x01, 0x51, 0x80,
				},
				rdataSOA: &RDataSOA{
					MName:   []byte("ns1.dewaweb.com"),
					RName:   []byte("monitor.dewahost.com"),
					Serial:  2017082501,
					Refresh: 3600,
					Retry:   7200,
					Expire:  1209600,
					Minimum: 86400,
				},
			}},
		},
	}, {
		desc: "RR with TXT RDATA",
		exp: &Message{
			Packet: []byte{
				0x3f, 0x7d, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f,
				0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
				0x00, 0x10, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x10,
				0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x3c,
				0x3b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
				0x6b, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
				0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x32,
				0x72, 0x6d, 0x35, 0x35, 0x31, 0x63, 0x75, 0x34,
				0x6b, 0x30, 0x61, 0x62, 0x30, 0x62, 0x78, 0x73,
				0x77, 0x35, 0x33, 0x36, 0x74, 0x6c, 0x64, 0x73,
				0x34, 0x68, 0x39, 0x35, 0xc0, 0x0c, 0x00, 0x10,
				0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x24,
				0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20,
				0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a,
				0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
				0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
				0x7e, 0x61, 0x6c, 0x6c, 0xc0, 0x0c, 0x00, 0x10,
				0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x2e,
				0x2d, 0x64, 0x6f, 0x63, 0x75, 0x73, 0x69, 0x67,
				0x6e, 0x3d, 0x30, 0x35, 0x39, 0x35, 0x38, 0x34,
				0x38, 0x38, 0x2d, 0x34, 0x37, 0x35, 0x32, 0x2d,
				0x34, 0x65, 0x66, 0x32, 0x2d, 0x39, 0x35, 0x65,
				0x62, 0x2d, 0x61, 0x61, 0x37, 0x62, 0x61, 0x38,
				0x61, 0x33, 0x62, 0x64, 0x30, 0x65,
				0x00, 0x00, 0x29, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Header: &SectionHeader{
				ID:      16253,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 3,
				ARCount: 1,
			},
			Question: &SectionQuestion{
				Name:  []byte("google.com"),
				Type:  QueryTypeTXT,
				Class: QueryClassIN,
			},
			Answer: []*ResourceRecord{{
				Name:     []byte("google.com"),
				Type:     QueryTypeTXT,
				Class:    QueryClassIN,
				TTL:      300,
				RDLength: 60,
				rdata: []byte{
					0x3b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
					0x6b, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
					0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
					0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x32,
					0x72, 0x6d, 0x35, 0x35, 0x31, 0x63, 0x75, 0x34,
					0x6b, 0x30, 0x61, 0x62, 0x30, 0x62, 0x78, 0x73,
					0x77, 0x35, 0x33, 0x36, 0x74, 0x6c, 0x64, 0x73,
					0x34, 0x68, 0x39, 0x35,
				},
				rdataText: &RDataText{
					v: []byte("facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95"),
				},
			}, {
				Name:     []byte("google.com"),
				Type:     QueryTypeTXT,
				Class:    QueryClassIN,
				TTL:      300,
				RDLength: 36,
				rdata: []byte{
					0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20,
					0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a,
					0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
					0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
					0x7e, 0x61, 0x6c, 0x6c,
				},
				rdataText: &RDataText{
					v: []byte("v=spf1 include:_spf.google.com ~all"),
				},
			}, {
				Name:     []byte("google.com"),
				Type:     QueryTypeTXT,
				Class:    QueryClassIN,
				TTL:      300,
				RDLength: 46,
				rdata: []byte{
					0x2d, 0x64, 0x6f, 0x63, 0x75, 0x73, 0x69, 0x67,
					0x6e, 0x3d, 0x30, 0x35, 0x39, 0x35, 0x38, 0x34,
					0x38, 0x38, 0x2d, 0x34, 0x37, 0x35, 0x32, 0x2d,
					0x34, 0x65, 0x66, 0x32, 0x2d, 0x39, 0x35, 0x65,
					0x62, 0x2d, 0x61, 0x61, 0x37, 0x62, 0x61, 0x38,
					0x61, 0x33, 0x62, 0x64, 0x30, 0x65,
				},
				rdataText: &RDataText{
					v: []byte("docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e"),
				},
			}},
			Additional: []*ResourceRecord{{
				Type:     QueryTypeOPT,
				Class:    QueryClassIN,
				TTL:      0,
				RDLength: 0,
				rdataOPT: &RDataOPT{},
			}},
		},
	}}

	msg := msgPool.Get().(*Message)

	for _, c := range cases {
		t.Log(c.desc)

		msg.Reset()

		err := msg.UnmarshalBinary(c.exp.Packet)
		if err != nil {
			t.Fatal(err)
		}

		test.Assert(t, "Header", *c.exp.Header, *msg.Header, true)
		test.Assert(t, "Question", *c.exp.Question, *msg.Question, true)
		test.Assert(t, "Answer Length", len(c.exp.Answer), len(msg.Answer), true)
		test.Assert(t, "Authority Length", len(c.exp.Authority), len(msg.Authority), true)
		test.Assert(t, "Additional Length", len(c.exp.Additional), len(msg.Additional), true)

		for x := 0; x < len(c.exp.Answer); x++ {
			test.Assert(t, "Answer.Name", c.exp.Answer[x].Name, msg.Answer[x].Name, true)
			test.Assert(t, "Answer.Type", c.exp.Answer[x].Type, msg.Answer[x].Type, true)
			test.Assert(t, "Answer.Class", c.exp.Answer[x].Class, msg.Answer[x].Class, true)
			test.Assert(t, "Answer.TTL", c.exp.Answer[x].TTL, msg.Answer[x].TTL, true)
			test.Assert(t, "Answer.RDLength", c.exp.Answer[x].RDLength, msg.Answer[x].RDLength, true)
			test.Assert(t, "Answer.rdata", c.exp.Answer[x].rdata, msg.Answer[x].rdata, true)
			test.Assert(t, "Answer.RData()", c.exp.Answer[x].RData(), msg.Answer[x].RData(), true)
		}
	}
}
